#!/usr/bin/env python3
# encoding: utf-8

import tweepy
import csv
import os
import argparse

# Twitter API credentials
CONSUMER_KEY = os.environ.get('TWITTER_CONSUMER_KEY')
CONSUMER_SECRET = os.environ.get('TWITTER_CONSUMER_SECRET')
ACCESS_KEY = os.environ.get('TWITTER_ACCESS_KEY')
ACCESS_SECRET = os.environ.get('TWITTER_ACCESS_SECRET')

if CONSUMER_KEY is None or CONSUMER_SECRET is None or ACCESS_KEY is None or ACCESS_SECRET is None:
    print("Missing credentials. Required environment variables:")
    print("      TWITTER_CONSUMER_KEY")
    print("      TWITTER_CONSUMER_SECRET")
    print("      TWITTER_ACCESS_KEY")
    print("      TWITTER_ACCESS_KEY")
    exit(1)

def get_all_tweets(screen_name, pretty_name):
    #Twitter only allows access to a users most recent 3240 tweets with this method

    #authorize twitter, initialize tweepy
    auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
    auth.set_access_token(ACCESS_KEY, ACCESS_SECRET)
    api = tweepy.API(auth)

    #initialize a list to hold all the tweepy Tweets
    alltweets = []

    #make initial request for most recent tweets (200 is the maximum allowed count)
    new_tweets = api.user_timeline(screen_name = screen_name,count=200)

    #save most recent tweets
    alltweets.extend(new_tweets)

    #save the id of the oldest tweet less one
    oldest = alltweets[-1].id - 1

    #keep grabbing tweets until there are no tweets left to grab
    while len(new_tweets) > 0:
        print("getting tweets before %s" % (oldest))

        #all subsiquent requests use the max_id param to prevent duplicates
        new_tweets = api.user_timeline(screen_name = screen_name,count=200,max_id=oldest)

        #save most recent tweets
        alltweets.extend(new_tweets)

        #update the id of the oldest tweet less one
        oldest = alltweets[-1].id - 1

        print("...%s tweets downloaded so far" % (len(alltweets)))

    #transform the tweepy tweets into a 2D array that will populate the csv
    outtweets = [[screen_name, pretty_name, tweet.id_str, tweet.created_at, tweet.text.encode("utf-8")] for tweet in alltweets]

    #write the csv
    with open('tweets.csv', 'ab') as f:
        writer = csv.writer(f)
        # writer.writerow(["id","created_at","text"])
        writer.writerows(outtweets)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Download tweets for a user.')
    parser.add_argument('handle', action="store", help='a Twitter handle')
    parser.add_argument('--name', action="store", help='a pretty name to store with the Twitter handle')

    args = parser.parse_args()

    if args.name == None:
        args.name = args.handle
    get_all_tweets(args.handle, args.name)
